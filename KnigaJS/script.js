// alert('Hello');
// [1, 2].forEach(alert); 
// или
// [1, 2].map(alert);

// let usetTelephonNummer = prompt('Ваш телефон:', '+7(916)726-1353');


//***** Преобразование типов

// "" + 1 + 0 = "10" // (1)
// "" - 1 + 0 = -1 // (2)
// true + false = 1
// 6 / "3" = 2
// "2" * "3" = 6
// 4 + 5 + "px" = "9px"
// "$" + 4 + 5 = "$45"
// "4" - 2 = 2
// "4px" - 2 = NaN
// "  -9  " + 5 = "  -9  5" // (3)
// "  -9  " - 5 = -14 // (4)
// null + 1 = 1 // (5)
// undefined + 1 = NaN // (6)
// " \t \n" - 2 = -2 // (7)


// ***** Number

// undefined	NaN 
// null	0 
// true / false	1 / 0
// string	Пробельные символы по краям обрезаются. 
// Далее, если остаётся пустая строка, то получаем 0, 
//иначе из непустой строки «считывается» число. При ошибке результат NaN.


// ***** BOOLEAN

// 0, null, undefined, NaN, ""	/false
// любое другое значение	/true


//***** NULL

// alert( null > 0 );  // (1) false
// alert( null == 0 ); // (2) false
// alert( null >= 0 ); // (3) true


//***** UNDEFINED

// alert( undefined > 0 ); // false (1)
// alert( undefined < 0 ); // false (2)
// alert( undefined == 0 ); // false (3)

// ***** Несколько операторов „?“

// let age = prompt('Возраст?', 18);
// let message = (age < 3) ? 'Здравствуй, малыш!' 
// :(age < 18) ? 'Привет!' 
// :(age < 100) ? 'Здравствуйте!' 
// :'Какой необычный возраст!';
// alert( message );

// ***** || (ИЛИ) 

// возвращает первое истинное значение или последнее, если такое значение не найдено.
// alert( null || 0 || 1 ); // 1 (первое истинное значение)
// let currentUser = null;
// let defaultUser = "John";
// let name = currentUser || defaultUser || "unnamed";
// alert( name ); // выбирается "John" – первое истинное значение

// ***** && (И)

// возвращает первое ложное значение. Или последнее, если ничего не найдено.
// alert( 1 && 2 && null && 3 ); // null
// alert( 1 && 2 && 3 ); // 3 
//Приоритет оператора && больше, чем у ||

// ***** Оператор нулевого слияния (??)

// Оператор нулевого слияния ?? — это быстрый способ выбрать первое «определённое» значение из списка.
// Используется для присвоения переменным значений по умолчанию:
// let firstName = null;
// let lastName = null;
// let nickName = "Суперкодер";
// Суперкодер - первое значение, которое определено
// alert(firstName ?? lastName ?? nickName ?? "Аноним"); 

// Использование ?? вместе с && или ||
// let x = 1 && 2 ?? 3; // Синтаксическая ошибка


// ****** ЦИКЛЫ
// Одно выполнение тела цикла называется итерация. 
// Цикл завершается при вычислении условия в false.
//


// ***** while 
//
// while (condition) {тело цикла}
// Код из тела цикла выполняется, пока условие condition истинно.

// ***** do…while
// 
// do {тело цикла} while (condition);
// Цикл выполнит тело, затем проверит условие condition, и пока значение равно true, он будет выполняться снова.


// ***** for
//
// for (начало; условие; шаг) {тело цикла }

// Любая часть for может быть пропущена.
// let i = 0;
// for (; i < 3; i++) { ... }
//
// for (;;) { } будет выполняться вечно


// ***** break
// можем выйти из цикла в любой момент
//
// let sum = 0;
// while (true) {
//  let value = +prompt("Введите число", '');
//  if (!value) break; // (*)
//  sum += value; }
// alert( 'Сумма: ' + sum );


// ***** continue
// цикл не прерывается, а переходит к следующей итерации (если условие все ещё равно true).
//
// for (let i = 0; i < 10; i++) {
//  if (i % 2 == 0) continue;
// если true, пропустить оставшуюся часть тела цикла
//  alert(i); // 1, 3, 5, 7, 9}

// ***** Нельзя использовать break/continue справа от оператора „?“
// (i > 5) ? alert(i) : continue; // continue здесь приведёт к ошибке

// ***** Метки для break/continue
//
// Если требуется выйти одновременно из нескольких уровней цикла сразу.
// Метки не дают возможности передавать управление в произвольное место кода, только внутри циклов. 
// outer: for (let i = 0; i < 3; i++) {
//  for (let j = 0; j < 3; j++) {
//    let input = prompt(( ${i},${j} ), '');
//    if (!input) break outer; // если пустая строка или Отмена, то выйти из обоих циклов
// тело внутреннего цикла
//  } }
//alert('Готово!');

// ***** switch
//
// проверка на равенство всегда строгая ===
// let a = 2 + 2;
//switch (a) {
//   case 3:
//     alert( 'Маловато' );
//     break;
//   case 4:
//     alert( 'В точку!' );
//     break;
//   case 5:
//     alert( 'Перебор' );
//     break;
//   default:
//     alert( "Нет таких значений" );
// }

//Группировка «case»
//
// case 3: 
  // case 5:
  //   alert('Неправильно!');
  //   alert("Может вам посетить урок математики?");
  //   break;




// ***** for..in
//
// Используется для перебора всех свойств ОБЪЕКТА
// тело цикла выполняется для каждого свойства объекта
// for (key in object) {тело цикла}  


// ***** for..of
//
// Используется для перебора перебора ЭЛЕМЕНТОВ МАССИВА 
// let array = ["Яблоко", "Апельсин", "Слива"];
// for (let item of array) {тело цикла}




let options = [
  {title: "Menu", height: 200, width: 100},
  {title2: "Menu2", height2: 400, width2: 200},
];

// Почему не могу options объявить, как объект с объектами {{...},{...}}

let someObj1 = { ...options}; // распаковываем и получаем объект с объектами {0: {…}, 1: {…}}
let someObj2 = options; // получаем массив с объектами [2: {…}, {…}]
console.log(someObj1);
console.log(someObj2);